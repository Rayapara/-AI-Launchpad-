# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1j4VV1mNLGNWvE_LQeAlsLLED6uhuuZOe
"""

# prompt: create a simplified supervised learning assignment using the classic Iris dataset. The goal is to classify iris species based on their features. This example will involve data loading, preprocessing, training a classifier, evaluate its performance and make predictions.

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report

# Load the Iris dataset
# Replace 'iris_dataset.csv' with the actual file path if necessary
from sklearn.datasets import load_iris

# Load the Iris dataset
iris = load_iris()

# Convert to a DataFrame
df = pd.DataFrame(data=iris.data, columns=iris.feature_names)

# Add the species column
df['species'] = iris.target

# Save the DataFrame to a CSV file
df.to_csv("iris_dataset.csv", index=False)

print("Dataset saved to iris_dataset.csv")

try:
  iris_data = pd.read_csv("iris_dataset.csv")
except FileNotFoundError:
  print("iris.csv not found. Please upload the file or provide a correct path.")
  # For demonstration purposes, create dummy data if the file is not found
  import numpy as np
  iris_data = pd.DataFrame({
      'sepal_length': np.random.rand(150),
      'sepal_width': np.random.rand(150),
      'petal_length': np.random.rand(150),
      'petal_width': np.random.rand(150),
      'species': np.random.choice(['setosa', 'versicolor', 'virginica'], 150)
  })


# Separate features (X) and target variable (y)
X = iris_data.drop("species", axis=1)
y = iris_data["species"]


# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Feature scaling using StandardScaler
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Initialize and train a Logistic Regression classifier
classifier = LogisticRegression()
classifier.fit(X_train, y_train)

# Make predictions on the test set
y_pred = classifier.predict(X_test)

# Evaluate the classifier
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy}")
print("\nClassification Report:\n", classification_report(y_test, y_pred))
